<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Login - SecureAI</title>
  <link rel="icon" type="image/x-icon" href="/static/favicon.ico" />
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet" />
  <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
  <script src="https://unpkg.com/feather-icons"></script>
  <script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.globe.min.js"></script>
  <style>
    .auth-container {
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
        0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
    .input-field {
      transition: all 0.3s ease;
    }
    .input-field:focus {
      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
    }
    .social-btn {
      transition: all 0.3s ease;
    }
    .social-btn:hover {
      transform: translateY(-2px);
    }
  </style>
</head>
<body class="bg-gray-50 font-sans">
  <div id="vanta-bg" class="fixed inset-0 -z-10 opacity-20"></div>

  <div class="min-h-screen flex items-center justify-center px-4 py-12">
    <div class="auth-container bg-white rounded-xl overflow-hidden w-full max-w-md" data-aos="zoom-in">
      <div class="bg-indigo-600 px-6 py-8 text-center">
        <div class="flex justify-center mb-4">
          <div class="w-16 h-16 rounded-full bg-white flex items-center justify-center">
            <i data-feather="shield" class="text-indigo-600 w-8 h-8"></i>
          </div>
        </div>
        <h1 class="text-2xl font-bold text-white">Welcome back to SecureAI</h1>
        <p class="text-indigo-100 mt-2">Sign in to your account using your username</p>
      </div>

      <div class="px-6 py-8">
        <form novalidate>
          <div class="space-y-5">
            <div>
              <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                  <i data-feather="user" class="h-5 w-5 text-gray-400"></i>
                </div>
                <input
                  id="username"
                  name="username"
                  type="text"
                  autocomplete="username"
                  required
                  placeholder="your username"
                  class="input-field block w-full px-4 py-3 pl-10 border rounded-lg border-gray-300 focus:ring-2 focus:border-indigo-500"
                />
              </div>
            </div>

            <div>
              <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                  <i data-feather="lock" class="h-5 w-5 text-gray-400"></i>
                </div>
                <input
                  id="password"
                  name="password"
                  type="password"
                  autocomplete="current-password"
                  required
                  placeholder="••••••••"
                  class="input-field block w-full px-4 py-3 pl-10 border rounded-lg border-gray-300 focus:ring-2 focus:border-indigo-500"
                />
              </div>
            </div>

            <div class="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                class="w-4 h-4 text-indigo-600 border rounded border-gray-300"
              />
              <label for="remember-me" class="ml-2 text-sm text-gray-700 block">Remember me</label>
            </div>

            <div>
              <button
                type="submit"
                class="w-full px-4 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition"
              >
                <span>Sign in</span>
              </button>
            </div>
          </div>
        </form>

        <div class="mt-6">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
              <i data-feather="mail" class="h-5 w-5 text-gray-400"></i>
            </div>
            <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
              <i data-feather="lock" class="h-5 w-5 text-gray-400"></i>
            </div>
          </div>
          <div class="mt-6">
            <a href="#" class="w-full inline-flex items-center justify-center px-4 py-2 mb-2 border rounded shadow hover:bg-gray-100">
              <i data-feather="github" class="mr-2 text-gray-800"></i> Google
            </a>
          </div>
        </div>
      </div>

      <div class="px-6 py-4 text-center bg-gray-50">
        <p class="text-sm text-gray-600">
          Don't have an account?
          <a href="/signup" class="font-medium text-indigo-600 hover:text-indigo-500">Sign up</a>
        </p>
      </div>
    </div>

  <script>
    const API_BASE_URL = 'http://10.171.191.73:8000'; // Note: This should match your FastAPI host/port

    document.addEventListener('DOMContentLoaded', () => {
      initializeComponents();
      
      const form = document.querySelector('form');
      form.addEventListener('submit', handleFormSubmission);
      
      const passwordField = document.getElementById('password');
      passwordField.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          form.dispatchEvent(new Event('submit'));
        }
      });
    });

    function initializeComponents() {
      if (window.VANTA) {
        VANTA.GLOBE({
          el: '#vanta-bg',
          mouseControls: true,
          touchControls: true,
          gyroControls: false,
          minHeight: 200,
          minWidth: 200,
          scale: 1,
          scaleMobile: 1,
          color: '#4f46e5',
          backgroundColor: '#ffffff',
          size: 0.6,
        });
      }

      if (window.AOS) {
        AOS.init({ duration: 600, easing: 'ease-in-out', once: true });
      }

      if (window.feather) {
        feather.replace();
      }
    }

    async function handleFormSubmission(e) {
      e.preventDefault();

      const username = document.getElementById('username').value.trim();
      const password = document.getElementById('password').value;
      const rememberMe = document.getElementById('remember-me').checked;
      const submitBtn = document.querySelector('button[type="submit"]');

      if (!username || !password) {
        showError('Please enter both username and password.');
        return;
      }

      clearMessages();
      setLoading(true, submitBtn);

      try {
        // Demo check
        if ((username === 'demouser' || username === 'testuser') && password === '123456') {
          handleDemoLogin(username, rememberMe);
          return;
        }

        // Real API call
        const resp = await fetch(`${API_BASE_URL}/login`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          body: JSON.stringify({ username, password, remember_me: rememberMe }),
        });

        const data = await resp.json();

        if (resp.ok) {
          handleSuccessLogin(data, rememberMe);
        } else {
          handleLoginError(resp.status, data);
        }
      } catch (err) {
        console.error(err);
        showError('Network error. Please try again later.');
      } finally {
        setLoading(false, submitBtn);
      }
    }

    function handleDemoLogin(username, rememberMe) {
      const fakeToken = 'demo-token-12345';
      const fakeRefresh = 'demo-refresh-token-12345';

      if (rememberMe) {
        localStorage.setItem('access_token', fakeToken);
        localStorage.setItem('refresh_token', fakeRefresh);
      } else {
        sessionStorage.setItem('access_token', fakeToken);
      }

      localStorage.setItem('user', JSON.stringify({ username, name: 'Demo User', id: 'demo-id' }));

      showSuccess('Login successful! Redirecting...');
      setTimeout(() => {
        window.location.href = 'frontend.html';
      }, 1500);
    }

    function handleSuccessLogin(data, rememberMe) {
      if (rememberMe) {
        localStorage.setItem('access_token', data.access_token);
        if (data.refresh_token) localStorage.setItem('refresh_token', data.refresh_token);
      } else {
        sessionStorage.setItem('access_token', data.access_token);
      }

      if (data.user) localStorage.setItem('user', JSON.stringify(data.user));

      showSuccess('Login successful! Redirecting...');
      setTimeout(() => {
        window.location.href = 'frontend.html';
      }, 1500);
    }

    function handleLoginError(status, data) {
      let msg = data.message || 'Login failed.';

      switch (status) {
        case 401:
          msg = 'Invalid username or password.';
          break;
        case 403:
          msg = 'Account locked or suspended.';
          break;
        case 429:
          msg = 'Too many login attempts. Try later.';
          break;
        case 500:
          msg = 'Server error, please try again later.';
          break;
      }
      showError(msg);
    }

    function setLoading(isLoading, button) {
      if (isLoading) {
        button.disabled = true;
        button.innerHTML = '<span class="animate-spin">⚙️</span> Signing in...';
      } else {
        button.disabled = false;
        button.innerHTML = '<span>Sign in</span>';
      }
    }

    function showError(message) {
      clearMessages();
      const errDiv = document.createElement('div');
      errDiv.className = 'error-message mt-4 p-3 bg-red-50 text-red-700 rounded-md text-sm border border-red-200';
      errDiv.textContent = message;
      document.querySelector('form').insertBefore(errDiv, document.querySelector('form').firstChild);

      if (window.feather) feather.replace();

      setTimeout(() => {
        if (errDiv.parentNode) errDiv.remove();
      }, 8000);
    }

    function showSuccess(message) {
      clearMessages();
      const succDiv = document.createElement('div');
      succDiv.className = 'success-message mt-4 p-3 bg-green-50 text-green-700 rounded-md text-sm border border-green-200';
      succDiv.textContent = message;
      document.querySelector('form').insertBefore(succDiv, document.querySelector('form').firstChild);

      if (window.feather) feather.replace();

      setTimeout(() => {
        if (succDiv.parentNode) succDiv.remove();
      }, 5000);
    }

    function clearMessages() {
      document.querySelectorAll('.error-message, .success-message').forEach(el => el.remove());
    }

    function isValidEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    }
  </script>
</body>
</html>
